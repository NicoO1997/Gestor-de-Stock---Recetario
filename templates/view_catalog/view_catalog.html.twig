{% extends 'base.html.twig' %}

{% block title %}Catálogo{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="{{ asset('styles/view_catalog.css') }}" rel="stylesheet">
    <link rel="icon" href="data:,">
{% endblock %}

{% block body %}
    <div class="catalog-container">
        <h1 class="catalog-title">Catálogo de Maquinaria</h1>

        {% if maquinarias is empty %}
            <p class="no-items">No hay maquinarias registradas.</p>
        {% else %}
            <div class="table-responsive">
                <table class="catalog-table">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Marca</th>
                            <th>Años</th>
                            <th>Meses</th>
                            <th>Descripción</th>
                            <th>Último Service</th>
                            <th>Imagen</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for maquinaria in maquinarias %}
                            <tr data-id="{{ maquinaria.id }}">
                                <td class="editable-cell" data-field="nombre">{{ maquinaria.nombre }}</td>
                                <td class="editable-cell" data-field="marca">{{ maquinaria.marca }}</td>
                                <td class="editable-cell" data-field="aniosUso">{{ maquinaria.aniosUso }}</td>
                                <td class="editable-cell" data-field="cantidad">{{ maquinaria.cantidad }}</td>
                                <td class="editable-cell" data-field="descripcion">{{ maquinaria.descripcion }}</td>
                                <td class="editable-cell" data-field="ultimoService">
                                    {{ maquinaria.ultimoService ? maquinaria.ultimoService|date('Y-m-d') : '' }}
                                </td>
                                <td class="image-cell">
                                    {% if maquinaria.imagen %}
                                        <img src="{{ asset('uploads/images/' ~ maquinaria.imagen) }}" 
                                             alt="{{ maquinaria.nombre }}" 
                                             class="maquinaria-image">
                                    {% else %}
                                        <p class="no-image">No image available</p>
                                    {% endif %}
                                    <input type="file" 
                                           class="image-input" 
                                           accept="image/*" 
                                           style="display: none;"
                                           data-field="imagen">
                                    <button type="button" 
                                            class="btn btn-sm btn-secondary change-image-btn" 
                                            style="display: none;">
                                        Cambiar imagen
                                    </button>
                                </td>
                                <td class="actions-cell">
                                    <button type="button" class="btn btn-secondary edit-btn" 
                                            data-edit-url="{{ path('maquinaria_edit', {'id': maquinaria.id}) }}"
                                            onclick="toggleEditing(this.closest('tr'))">
                                        Editar
                                    </button>
                                    <button type="button" class="btn btn-primary save-btn" style="display:none;" 
                                            onclick="saveChanges(this.closest('tr'))">
                                        Guardar
                                    </button>
                                    <form action="{{ path('maquinaria_delete', {'id': maquinaria.id}) }}" method="post" class="delete-form" style="display:inline;">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ maquinaria.id) }}">
                                        <button type="submit" class="btn btn-danger btn-sm">Eliminar</button>
                                    </form>
                                    <input type="hidden" class="csrf-token" value="{{ csrf_token('edit' ~ maquinaria.id) }}">
                                    <input type="hidden" class="edit-url" value="{{ path('maquinaria_edit', {'id': maquinaria.id}) }}">
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function showAlert(type, message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove();">&times;</button>
        `;
        
        document.body.appendChild(alertDiv);

        setTimeout(() => {
            if (alertDiv.parentElement) {
                alertDiv.remove();
            }
        }, 3000);
    }

        function revertChanges(row) {
            const cells = row.querySelectorAll('.editable-cell');
            cells.forEach(cell => {
                if (cell.dataset.field === 'ultimoService' && cell.dataset.originalDate) {
                    cell.textContent = cell.dataset.originalDate;
                } else {
                    cell.textContent = cell.dataset.originalValue || '';
                }
                cell.setAttribute('contenteditable', 'false');
                cell.classList.remove('editing');
            });
        }

        async function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        function toggleEditing(row) {
            const cells = row.querySelectorAll('.editable-cell');
            const editBtn = row.querySelector('.edit-btn');
            const saveBtn = row.querySelector('.save-btn');
            const imageInput = row.querySelector('.image-input');
            const changeImageBtn = row.querySelector('.change-image-btn');

            cells.forEach(cell => {
                if (cell.getAttribute('contenteditable') === 'true') {
                    cell.setAttribute('contenteditable', 'false');
                    cell.classList.remove('editing');
                } else {
                    cell.setAttribute('contenteditable', 'true');
                    cell.classList.add('editing');
                    cell.dataset.originalValue = cell.textContent;
                    
                    if (cell.dataset.field === 'ultimoService') {
                        const currentValue = cell.textContent.trim();
                        if (currentValue) {
                            cell.dataset.originalDate = currentValue;
                            const dateInput = document.createElement('input');
                            dateInput.type = 'date';
                            dateInput.value = currentValue;
                            dateInput.className = 'form-control';
                            dateInput.max = new Date().toISOString().split('T')[0];
                            cell.innerHTML = '';
                            cell.appendChild(dateInput);
                        }
                    }
                }
            });

            if (imageInput) {
                imageInput.style.display = imageInput.style.display === 'none' ? 'block' : 'none';
                changeImageBtn.style.display = changeImageBtn.style.display === 'none' ? 'block' : 'none';
            }

            editBtn.style.display = editBtn.style.display === 'none' ? '' : 'none';
            saveBtn.style.display = saveBtn.style.display === 'none' ? '' : 'none';
        }

        async function saveChanges(row) {
        const nombre = row.querySelector('[data-field="nombre"]').textContent.trim();
        const marca = row.querySelector('[data-field="marca"]').textContent.trim();
        const cantidadCell = row.querySelector('[data-field="cantidad"]');
        const aniosUsoCell = row.querySelector('[data-field="aniosUso"]');
        const descripcion = row.querySelector('[data-field="descripcion"]').textContent.trim();
        const ultimoServiceCell = row.querySelector('[data-field="ultimoService"]');
        const imageInput = row.querySelector('.image-input');
        
        if (!nombre) {
            showAlert('danger', 'El campo Nombre no puede estar vacío');
            return;
        }
        if (!marca) {
            showAlert('danger', 'El campo Marca no puede estar vacío');
            return;
        }
        if (!descripcion) {
            showAlert('danger', 'El campo Descripción no puede estar vacío');
            return;
        }

        const data = {
            nombre: nombre,
            marca: marca,
            descripcion: descripcion
        };

        const aniosUso = aniosUsoCell.textContent.trim();
        const aniosUsoNum = parseInt(aniosUso, 10);
        if (isNaN(aniosUsoNum) || aniosUsoNum < 0) {
            showAlert('danger', 'Los Años no pueden ser negativos');
            return;
        }
        data.aniosUso = aniosUsoNum;

        const cantidad = cantidadCell.textContent.trim();
        const cantidadNum = parseInt(cantidad, 10);
        if (isNaN(cantidadNum) || cantidadNum < 0 || cantidadNum > 11) {
            showAlert('danger', 'La Cantidad (Meses) debe estar entre 0 y 11');
            return;
        }
        data.cantidad = cantidadNum;

        let changed = false;
        const dateInput = ultimoServiceCell.querySelector('input[type="date"]');
        if (dateInput) {
            const newDate = dateInput.value;
            const originalDate = ultimoServiceCell.dataset.originalDate;
            
            if (newDate !== originalDate) {
                data.ultimoService = newDate;
                changed = true;
            }
        }

        if (imageInput && imageInput.files.length > 0) {
            const base64Image = await fileToBase64(imageInput.files[0]);
            data.imagen = base64Image;
            changed = true;
        }

        changed = changed || 
            nombre !== row.querySelector('[data-field="nombre"]').dataset.originalValue ||
            marca !== row.querySelector('[data-field="marca"]').dataset.originalValue ||
            aniosUso !== row.querySelector('[data-field="aniosUso"]').dataset.originalValue ||
            cantidad !== row.querySelector('[data-field="cantidad"]').dataset.originalValue ||
            descripcion !== row.querySelector('[data-field="descripcion"]').dataset.originalValue;

        if (!changed) {
            showAlert('info', 'No se han detectado cambios');
            revertChanges(row);
            setTimeout(() => location.reload(), 2000);
            return;
        }

        const editUrl = row.querySelector('.edit-url').value;
        const csrfToken = row.querySelector('.csrf-token').value;

        try {
            const response = await fetch(editUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': csrfToken
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
                toggleEditing(row);
                showAlert('success', 'Maquinaria actualizada correctamente');
                setTimeout(() => location.reload(true), 500);
            } else {
                revertChanges(row);
                showAlert('danger', result.error || 'Error al actualizar la maquinaria');
            }
        } catch (error) {
            revertChanges(row);
            showAlert('danger', 'Error de conexión');
            console.error('Error:', error);
        }
    }

        document.addEventListener('DOMContentLoaded', function() {
            const changeImageBtns = document.querySelectorAll('.change-image-btn');
            changeImageBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const imageInput = this.parentElement.querySelector('.image-input');
                    imageInput.click();
                });
            });

            const imageInputs = document.querySelectorAll('.image-input');
            imageInputs.forEach(input => {
                input.addEventListener('change', function(e) {
                    if (this.files && this.files[0]) {
                        const reader = new FileReader();
                        const imgElement = this.parentElement.querySelector('.maquinaria-image');
                        
                        reader.onload = function(e) {
                            if (imgElement) {
                                imgElement.src = e.target.result;
                            } else {
                                const newImg = document.createElement('img');
                                newImg.src = e.target.result;
                                newImg.className = 'maquinaria-image';
                                const noImage = input.parentElement.querySelector('.no-image');
                                if (noImage) {
                                    noImage.replaceWith(newImg);
                                }
                            }
                        };
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            });
        });
    </script>
{% endblock %}